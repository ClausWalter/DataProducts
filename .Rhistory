zurichSite <- c("<a href='http://www.zurich.com'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "https://clauswalter.github.io/ZurichLogo.png"
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSite <- c("<a href='http://www.zurich.com'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "https://clauswalter.github.io/ZurichLogo.png",
iconWidth= 31*1.5,
iconHeight= 31,
iconAnchorX = 31*1.5/2,
iconAnchorY=16
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSite <- c("<a href='http://www.zurich.com'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "https://clauswalter.github.io/ZurichLogo.png",
iconWidth= 46,
iconHeight= 31,
iconAnchorX = 23,
iconAnchorY=16
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSite <- c("<a href='http://www.zurich.com'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "https://github.com/ClausWalter/ClausWalter.github.io/blob/master/ZurichLogo.png",
iconWidth= 46,
iconHeight= 31,
iconAnchorX = 23,
iconAnchorY=16
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSite <- c("<a href='http://www.zurich.com'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "~/ZurichLogo.png",
iconWidth= 46,
iconHeight= 31,
iconAnchorX = 23,
iconAnchorY=16
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSite <- c("<a href='http://www.zurich.com'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "~/ZurichLogo.png",
iconWidth= 46,
iconHeight= 31,
iconAnchorX = 23,
iconAnchorY=16
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSites <- c("<a href='http://www.zurich.com'>",
"<a href='http://www.zurich.com'>",
"<a href='https://www.zurichna.com/'>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon, popup = zurichSites)
library(leaflet)
zurichIcon <- makeIcon(
iconUrl = "~/ZurichLogo.png",
iconWidth= 46,
iconHeight= 31,
iconAnchorX = 23,
iconAnchorY=16
)
zurichLatLong <- data.frame(
lat=c(47.364199, 47.362077, 42.049175),
lng=c(8.519464, 8.535053, -88.032031)
)
zurichSites <- c("<a href='http://www.zurich.com'>Zurich Switzerland</a>",
"<a href='http://www.zurich.com'>Zurich Switzerland</a>",
"<a href='https://www.zurichna.com/'>Zurich North America</a>")
zurichLatLong%>%leaflet()%>%addTiles()%>%addMarkers(icon = zurichIcon, popup = zurichSites)
library(plotly)
source('~/test.R')
test
test()
mtcars
head(mtcars)
source('~/test.R')
source('~/test.R')
head(mtcars)
test()
source('~/test.R')
test()
library(plotly)
plot_ly(data = mtcars, x = wt, y = mpg, mode="markers")
library(plotly)
plot_ly(data = mtcars, x = cyl, y = mpg, mode="markers")
data(mtcars)
library(plotly)
plot_ly(data = mtcars, x = cyl, y = mpg, mode="markers")
?plot_ly
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(ISLR)
data(Wage)
temp<-Wage[,c("wage", "education", "race")]
temp1<-expand.grid(Wage$education, Wage$race)
head(temp1,5)
edu<-as.factor(unique(Wage$race))
race<-as.factor(unique(wage(education)))
race<-as.factor(unique(wage$education))
race<-as.factor(unique(Wage$education))
race
edu
expand.grid(race, edu)
edu<-as.factor(unique(Wage$education))
race<-as.factor(unique(Wage$race))
jobclass<-as.factor(unique(Wage$jobclass))
combinations<-expand.grid(edu, race, jobclass)
str(combinations)
nrows(Wage$race==1)
nrow(Wage$race==1)
nrow(Wage$race==2)
head(combinations, 2)
nrow(Wage$education==1. < HS Grad)
nrow(Wage$education=="1. < HS Grad")
str(combinations)
summary(combinations)
nrow(Wage$education=="1.")
wage$education
Wage$education
nrow(combinations[,1]=="5. Advanced Degree")
nrow(combinations[,2]=="5. Advanced Degree")
nrow(combinations[,3]=="5. Advanced Degree")
nrow(combinations)
combinations
nrow(combinations[,3]=="Advanced Degree")
nrow(combinations[,3]=="2. Information")
nrow("information" combinations[,3]=="2. Information")
grepl("information", combinations)
grepl("Information", combinations)
str(combination)
str(combinations)
combinations[,2==1]
?which
which(combinations$Var1 == 1)
which(combinations$Var1 == "5. Advanced Degree")
nrow(which(combinations$var1=="5. Advanced Degree"))
count(which(combinations$var1=="5. Advanced Degree"))
abs(which(combinations$var1=="5. Advanced Degree"))
combinations[c("5", "10"),]
str(Wage)
which(Wage$education==combinations[2,Var1]&Wage$race==combinations[2, Var2]&Wage$jobclass==combinations[2,Var3])
which(Wage$education==combinations[2, 1]&Wage$race==combinations[2, 2]&Wage$jobclass==combinations[2,3])
temp2<-which(Wage$education==combinations[2, 1]&Wage$race==combinations[2, 2]&Wage$jobclass==combinations[2,3])
nrow(temp2)
length(temp2)
?mean
mean(Wage[temp2,])
mean(Wage[temp2,"wage"])
length(temp2)
temp2<-which(Wage$education==combinations[2, 1]&Wage$race==combinations[2, 2]&Wage$jobclass==combinations[2,3])
temp1<-which(Wage$education==combinations[1, 1]&Wage$race==combinations[1, 2]&Wage$jobclass==combinations[1,3])
lenght(temp1)
length(temp1)
mean(Wage[temp1,"wage"])
Wage[1,]
Wage[1,1]
nrow(combinations)
for(i in 1:nrow(combinations)){
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
temp_i[i, Var4] <- length(temp_i)
temp_i[i, Var5] <- mean(Wage[temp_i,"wage"])
}
for(i in 1:nrow(combinations)){
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
temp_i[i, temp_i$Var4] <- length(temp_i)
temp_i[i, temp_i$Var5] <- mean(Wage[temp_i,"wage"])
}
for(i in 1:nrow(combinations)){
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
temp_i[i, 4] <- length(temp_i)
temp_i[i, 5] <- mean(Wage[temp_i,"wage"])
}
i<-1
for(i in 1:nrow(combinations)){
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
temp_i$Var4 <- length(temp_i)
temp_i$Var5 <- mean(Wage[temp_i,"wage"])
}
i<-1
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
head(temp_1, 1)
temp_1<-which(Wage$education==combinations[1, 1]&Wage$race==combinations[1, 2]&Wage$jobclass==combinations[1,3])
temp_1
str(combinations)
for(i in 1:nrow(combinations)){
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
length_i <- length(temp_i)
mean_i <- mean(Wage[temp_i,"wage"])
combinations[i,Var4]<-length_i
combinations[i,Var5]<- mean_i
}
for(i in 1:nrow(combinations)){
temp_i<-which(Wage$education==combinations[i, 1]&Wage$race==combinations[i, 2]&Wage$jobclass==combinations[i,3])
length_i <- length(temp_i)
mean_i <- mean(Wage[temp_i,"wage"])
combinations[i,4]<-length_i
combinations[i,5]<- mean_i
}
combinations
plot_ly(Wage, x = combinations$Var1, y = combinations$V5, z = combinations$Var2, type = "scatter3d",
mode= "markers", color = combinations$Var3, sizes = combinations$V4)
plot_ly(Wage, x = combinations$Var1, y = combinations$V5, z = combinations$Var2, type = "scatter3d",
mode= "markers", color = combinations$Var3, size = combinations$V4)
combinations$V4<-combinations$V4 * 10
plot_ly(Wage, x = combinations$Var1, y = combinations$V5, z = combinations$Var2, type = "scatter3d",
mode= "markers", color = combinations$Var3, size = combinations$V4)
head(combinations)
plot_ly(Wage, x = combinations$Var5, y = combinations$V3, z = combinations$Var2, type = "scatter3d",
mode= "markers", color = combinations$Var1, size = combinations$V4)
plot_ly(Wage, x = combinations$Var2, y = combinations$V5, z = combinations$Var2, type = "scatter3d",
mode= "markers", color = combinations$Var1, size = combinations$V4)
plot_ly(Wage, x = combinations$Var2, y = combinations$V5, z = combinations$Var3, type = "scatter3d",
mode= "markers", color = combinations$Var1, size = combinations$V4)
combinations
head(mtcars,1)
library(plotly)
data(mtcars)
plot_ly(data=mtcars, y = mtcars$mpg, color=Wage$wt, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=Wage$disp, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=Wage$cyl, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=Wage$hp, type="box")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, z = mtcars$disp, type = "scatter3d",
mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
library(plotly)
data(mtcars)
plot_ly(data=mtcars, y = mtcars$mpg, color=mtcars$wt, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=mtcars$disp, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=mtcars$cyl, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=mtcars$hp, type="box")
plot_ly(data=mtcars, y = mtcars$mpg, color=mtcars$hp)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, z = mtcars$disp, type = "scatter3d",
mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
library(plotly)
library(ISLR)
data(Wage)
temp<-Wage[,c("wage", "education", "race")]
plot_ly(data=Wage, y = Wage$wage, color=Wage$race, type="box")
plot_ly(data=Wage, y = Wage$wage, color=Wage$education, type="box")
plot_ly(data=Wage, y = Wage$wage, color=Wage$jobclass, type="box")
plot_ly(z=temp, type="surface")
library(plotly)
library(ISLR)
data(Wage)
plot_ly(data=Wage, y = Wage$wage, color=Wage$race, type="box")
plot_ly(data=Wage, y = Wage$wage, color=Wage$education, type="box")
plot_ly(data=Wage, y = Wage$wage, color=Wage$jobclass, type="box")
plot_ly(Wage, x = Wage$education, y = Wage$wage, z = Wage$race, type = "scatter3d",
mode= "markers", color = Wage$jobclass)
source('~/test.R')
?plot_ly
library(plotly)
data(mtcars)
p1 <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
p2 <- plot_ly(mtcars, x = mtcars$disp, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
p <- subplot(p1, p2)
p
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, z = mtcars$disp, type = "scatter3d",
mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
library(plotly)
data(mtcars)
x1 <- list(title = "Weight")
y1 <- list ( title = "MPG")
p1 <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x1, yxasis = y1)
p2 <- plot_ly(mtcars, x = mtcars$disp, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
p <- subplot(p1, p2)
p
library(plotly)
data(mtcars)
x1 <- list(title = "Weight")
y1 <- list ( title = "MPG")
p1 <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x1, yaxsis = y1)
p
p1
library(plotly)
data(mtcars)
x1 <- list ( title = "Weight")
y1 <- list ( title = "MPG")
p1 <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x1, yaxsis = y1)
p1
library(plotly)
data(mtcars)
x1 <- list ( title = "Weight")
y1 <- list ( title = "MPG")
p1 <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x1, yaxis = y1, title = "MPG in relation to Weight")
x2 <- list ( title = "Displacement")
y2 <- list ( title = "MPG")
p2 <- plot_ly(mtcars, x = mtcars$disp, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x2, yaxis = y2, title = "MPG in relation to Displacement")
p <- subplot(p1, p2)
p
p <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, z = mtcars$disp, type = "scatter3d",
mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(title="WT and Disp. to MPG",
scene=list(
labs=list(title="Cyl."),
xaxis=list(title="Weight"),
yaxis=list(title="MPG"),
zaxis=list(title="Disp.")))
p
p <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, z = mtcars$disp, type = "scatter3d",
mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(title="WT and Disp. to MPG",
scene=list(
legend=list(title = "Cyl."),
xaxis=list(title="Weight"),
yaxis=list(title="MPG"),
zaxis=list(title="Disp.")))
p
library(plotly)
data(mtcars)
x1 <- list ( title = "Weight")
y1 <- list ( title = "MPG")
p1 <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x1, yaxis = y1, title = "MPG in relation to Weight")
p1
x2 <- list ( title = "Displacement")
y2 <- list ( title = "MPG")
p2 <- plot_ly(mtcars, x = mtcars$disp, y = mtcars$mpg, mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(xaxis = x2, yaxis = y2, title = "MPG in relation to Displacement")
p2
## p <- subplot(p1, p2)
## p
p <- plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, z = mtcars$disp, type = "scatter3d",
mode= "markers", color = as.factor(mtcars$cyl), size = mtcars$hp) %>%
layout(title="WT and Disp. to MPG",
scene=list(
xaxis=list(title="Weight"),
yaxis=list(title="MPG"),
zaxis=list(title="Disp.")))
p
source('~/test.R')
source('~/test.R')
source('~/test.R')
test
test()
source('~/test.R')
test()
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
library(miniUI)
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
str(mtcars)
max(mtcars$mpg)
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
?plotlyOutput
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
head(mtcars, 2)
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
?subset
runApp('DataProductsWeek3/DataProductsWeek3')
temp<-subset(mtcars, hp>200)
temp
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
?filter
mtcars[,mpg<20]
mtcars[,mtcars$mpg<20]
str(mtcars)
runApp('DataProductsWeek3/DataProductsWeek3')
dataset <- reactive({
x<-subset(mtcars, mpg<=input$mpg)
})
dataset()
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
str(diamonds)
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
?plot_ly
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
ggplot(mtcars)
ggplot(diamonds)
library(dplyr)
filter(mtcars, mpg<=20)
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
shiny::runApp('DataProductsWeek3/DataProductsWeek3')
runApp('DataProductsWeek3/DataProductsWeek3')
